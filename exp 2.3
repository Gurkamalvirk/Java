import java.util.*;
import java.util.stream.*;

class Employee {
    String name;
    int age;
    double salary;

    public Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return name + " | " + age + " | " + salary;
    }
}

class Student {
    String name;
    double marks;

    public Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }

    @Override
    public String toString() {
        return name + " | " + marks;
    }
}

class Product {
    String name;
    double price;
    String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " | " + price + " | " + category;
    }
}

public class Nimbus {
    public static void main(String[] args) {

        // ===== Part A: Sorting Employees =====
        System.out.println("===== Part A: Employee Sorting =====");
        List<Employee> employees = Arrays.asList(
                new Employee("Alice", 30, 50000),
                new Employee("Bob", 25, 60000),
                new Employee("Charlie", 28, 55000),
                new Employee("David", 35, 70000)
        );

        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Sorted by Name:");
        employees.forEach(System.out::println);

        employees.sort((e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("\nSorted by Age:");
        employees.forEach(System.out::println);

        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("\nSorted by Salary (Descending):");
        employees.forEach(System.out::println);

        // ===== Part B: Filtering and Sorting Students =====
        System.out.println("\n===== Part B: Student Filtering & Sorting =====");
        List<Student> students = Arrays.asList(
                new Student("Alice", 82.5),
                new Student("Bob", 70.0),
                new Student("Charlie", 90.0),
                new Student("David", 78.0)
        );

        System.out.println("Students with marks > 75, sorted by marks:");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);

        // ===== Part C: Stream Operations on Products =====
        System.out.println("\n===== Part C: Product Stream Operations =====");
        List<Product> products = Arrays.asList(
                new Product("Laptop", 80000, "Electronics"),
                new Product("Smartphone", 50000, "Electronics"),
                new Product("Shirt", 1500, "Clothing"),
                new Product("Jeans", 2500, "Clothing"),
                new Product("Fridge", 30000, "Electronics"),
                new Product("Shoes", 2000, "Footwear")
        );

        // Group products by category
        Map<String, List<Product>> groupedByCategory = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Products Grouped by Category:");
        groupedByCategory.forEach((k, v) -> System.out.println(k + " => " + v));

        // Most expensive product in each category
        Map<String, Optional<Product>> maxByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        System.out.println("\nMost Expensive Product by Category:");
        maxByCategory.forEach((k, v) -> System.out.println(k + " => " + v.get()));

        // Average price of all products
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage Price of Products: " + avgPrice);
    }
}
